import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer

apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["../core/assets/"]
sourceSets.main.resources.exclude("*.class")

project.ext.mainClassName = "com.unibo.s3.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}

/*shadowJar {
    baseName = "remote"
    classifier = null
    version = null
    manifest {
        attributes 'Implementation-Title': 'GeT',
                'Main-Class': 'com.unibo.s3.desktop.ComputeLauncher'
    }
    transform(AppendingTransformer) {
        resource = 'reference.conf'
    }
    dependencies {
        exclude(dependency("com.kotcrab.vis:vis-ui:$visuiVersion"))
        exclude(dependency("com.badlogicgames.box2dlights:box2dlights:1.4"))
        exclude(dependency("com.typesafe.akka:akka-testkit_2.11:2.5.4"))
        exclude(dependency("net.dermetfan.libgdx-utils:libgdx-utils-box2d:0.13.4"))
        exclude(dependency("junit:junit:4.+"))

    }
}*/

shadowJar {
    baseName = "local"
    classifier = null
    version = null
    manifest {
        attributes 'Implementation-Title': 'GeT',
                'Main-Class': 'com.unibo.s3.desktop.DesktopLauncher'
    }
    transform(AppendingTransformer) {
        resource = 'reference.conf'
    }
    dependencies {
        exclude(dependency("com.typesafe.akka:akka-testkit_2.11:2.5.4"))
        exclude(dependency("junit:junit:4.+"))
        exclude(dependency("com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"))

    }
}